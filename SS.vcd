$date
	Sat Aug 23 01:21:36 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module Single_Stage_tb $end
$scope module Single_Stage_Top $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 64 # WRITE_DATA [63:0] $end
$var wire 1 $ SUB $end
$var wire 1 % RegWrite $end
$var wire 64 & READ_DATA2 [63:0] $end
$var wire 64 ' READ_DATA1 [63:0] $end
$var wire 64 ( PC_NEXT_REG [63:0] $end
$var wire 64 ) PC_NEXT_IMM [63:0] $end
$var wire 64 * PC_NEXT [63:0] $end
$var wire 64 + PC_CURR [63:0] $end
$var wire 1 , MemtoReg $end
$var wire 1 - MemWrite $end
$var wire 1 . MemRead $end
$var wire 2 / Imm_Src [1:0] $end
$var wire 32 0 INSTRUCTION_BUS [31:0] $end
$var wire 64 1 IMM_OUT [63:0] $end
$var wire 64 2 DMEM_READ_DATA [63:0] $end
$var wire 1 3 Branch $end
$var wire 1 4 ALU_ZERO $end
$var wire 64 5 ALU_OUT [63:0] $end
$var wire 1 6 ALU_CARRY $end
$var wire 64 7 ALU_B [63:0] $end
$var wire 1 8 ALUSrc $end
$var wire 3 9 ALUOp [2:0] $end
$var wire 3 : ALUCONTROL [2:0] $end
$scope module ALU $end
$var wire 64 ; A_and_B [63:0] $end
$var wire 64 < A_xor_B [63:0] $end
$var wire 64 = B_comp [63:0] $end
$var wire 64 > sum [63:0] $end
$var wire 1 4 zero $end
$var wire 1 $ sub $end
$var wire 1 6 Carry_out $end
$var wire 64 ? Carry_intermediate [63:0] $end
$var wire 64 @ B [63:0] $end
$var wire 64 A A_xor_B_and_cin [63:0] $end
$var wire 3 B ALU_Sel [2:0] $end
$var wire 64 C A [63:0] $end
$var reg 64 D ALU_Out [63:0] $end
$upscope $end
$scope module ALU_Mux $end
$var wire 1 8 s $end
$var wire 64 E c [63:0] $end
$var wire 64 F b [63:0] $end
$var wire 64 G a [63:0] $end
$upscope $end
$scope module Imm_Gen $end
$var wire 2 H imm_src [1:0] $end
$var wire 64 I imm_out [63:0] $end
$var wire 32 J imm_in [31:0] $end
$upscope $end
$scope module PC_Adder_Imm $end
$var wire 64 K b [63:0] $end
$var wire 64 L c [63:0] $end
$var wire 64 M a [63:0] $end
$upscope $end
$scope module PC_Adder_Regular $end
$var wire 64 N b [63:0] $end
$var wire 64 O c [63:0] $end
$var wire 64 P a [63:0] $end
$upscope $end
$scope module PC_Update_Mux $end
$var wire 64 Q a [63:0] $end
$var wire 64 R b [63:0] $end
$var wire 1 S s $end
$var wire 64 T c [63:0] $end
$upscope $end
$scope module PC_block $end
$var wire 64 U PC_NEXT [63:0] $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var reg 64 V PC [63:0] $end
$upscope $end
$scope module Write_Back_Mux $end
$var wire 64 W a [63:0] $end
$var wire 1 , s $end
$var wire 64 X c [63:0] $end
$var wire 64 Y b [63:0] $end
$upscope $end
$scope module control_unit_alu $end
$var wire 4 Z funct [3:0] $end
$var wire 1 [ funct7_5 $end
$var wire 3 \ funct3 [2:0] $end
$var wire 3 ] ALUOp [2:0] $end
$var reg 3 ^ ALUControl [2:0] $end
$var reg 1 $ sub $end
$upscope $end
$scope module control_unit_main $end
$var wire 7 _ opcode [6:0] $end
$var wire 1 % RegWrite $end
$var wire 1 , MemtoReg $end
$var wire 1 - MemWrite $end
$var wire 1 . MemRead $end
$var wire 2 ` Imm_Src [1:0] $end
$var wire 1 3 Branch $end
$var wire 1 8 ALUSrc $end
$var wire 3 a ALUOp [2:0] $end
$upscope $end
$scope module data_memory $end
$var wire 1 . MemRead $end
$var wire 1 - MemWrite $end
$var wire 64 b address [63:0] $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 1 4 zero $end
$var wire 64 c WriteData [63:0] $end
$var reg 64 d ReadData [63:0] $end
$var integer 32 e fd [31:0] $end
$var integer 32 f i [31:0] $end
$upscope $end
$scope module instruction_memory $end
$var wire 64 g PC [63:0] $end
$var wire 1 " rst $end
$var wire 32 h instruction [31:0] $end
$upscope $end
$scope module register_file $end
$var wire 5 i ReadReg1 [4:0] $end
$var wire 5 j ReadReg2 [4:0] $end
$var wire 1 % RegWrite $end
$var wire 64 k WriteData [63:0] $end
$var wire 5 l WriteReg [4:0] $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 64 m ReadData2 [63:0] $end
$var wire 64 n ReadData1 [63:0] $end
$var integer 32 o fd [31:0] $end
$var integer 32 p i [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
bx p
bx o
b0 n
b0 m
b0 l
b0 k
b0 j
b0 i
b0 h
b0 g
bx f
bx e
b0 d
b0 c
b0 b
bx a
bx `
b0 _
bx ^
bx ]
b0 \
0[
b0 Z
b0 Y
b0 X
b0 W
b0 V
b100 U
b100 T
0S
b0 R
b100 Q
b0 P
b100 O
b100 N
b0 M
b0 L
b0 K
b0 J
b0 I
bx H
b0 G
b0 F
b0 E
b0 D
b0 C
bx B
bx A
b0 @
bx ?
bx >
bx =
bx <
b0 ;
bx :
bx 9
08
b0 7
x6
b0 5
x4
03
b0 2
b0 1
b0 0
bx /
0.
0-
0,
b0 +
b100 *
b0 )
b100 (
b0 '
b0 &
1%
x$
b0 #
1"
1!
$end
#50
0!
#100
1!
#150
0!
#200
1!
#250
0!
#300
1!
#350
0!
#400
1!
#450
0!
#500
b1000 *
b1000 T
b1000 U
b1000 (
b1000 O
b1000 Q
b100 +
b100 M
b100 P
b100 V
b100 g
04
06
b0 ?
b111 >
b111 #
b111 X
b111 k
b11 7
b11 @
b11 E
b111 <
b11 =
b0 A
b111 5
b111 D
b111 W
b111 b
b11 &
b11 G
b11 c
b11 m
b100 '
b100 C
b100 n
0$
b0 :
b0 B
b0 ^
bx )
bx L
bx R
b0x00000x00000000xxx 1
b0x00000x00000000xxx F
b0x00000x00000000xxx I
b0x00000x00000000xxx K
b0 9
b0 ]
b0 a
b101 l
b11 j
b100 i
b110011 _
b1100100000001010110011 0
b1100100000001010110011 J
b1100100000001010110011 h
1!
0"
#550
0!
#600
b1011 #
b1011 X
b1011 k
b0 ?
b1011 5
b1011 D
b1011 W
b1011 b
b1001 =
b1011 >
b0xxx00000000000xxx0 1
b0xxx00000000000xxx0 F
b0xxx00000000000xxx0 I
b0xxx00000000000xxx0 K
b1001 7
b1001 @
b1001 E
b0 ;
b1011 <
b1001 &
b1001 G
b1001 c
b1001 m
b10 '
b10 C
b10 n
b1000 l
b110 j
b111 i
b11000111000010000110011 0
b11000111000010000110011 J
b11000111000010000110011 h
b1100 *
b1100 T
b1100 U
b1100 (
b1100 O
b1100 Q
b1000 +
b1000 M
b1000 P
b1000 V
b1000 g
b100000 p
b10000000000000000000000000000011 o
1!
#650
0!
#700
04
b0 A
b10110 #
b10110 X
b10110 k
b1000 ?
b10110 5
b10110 D
b10110 W
b10110 b
b1100 =
b10110 >
18
b11000 )
b11000 L
b11000 R
b1100 1
b1100 F
b1100 I
b1100 K
b1100 7
b1100 @
b1100 E
b1000 ;
b110 <
b0 /
b0 H
b0 `
bx &
bx G
bx c
bx m
b1010 '
b1010 C
b1010 n
b1 9
b1 ]
b1 a
b1001 l
b1100 j
b1010 i
b10011 _
b110001010000010010010011 0
b110001010000010010010011 J
b110001010000010010010011 h
b10000 *
b10000 T
b10000 U
b10000 (
b10000 O
b10000 Q
b1100 +
b1100 M
b1100 P
b1100 V
b1100 g
b100000 p
1!
#750
0!
#800
b1111 2
b1111 Y
b1111 d
b0 ?
b100 5
b100 D
b100 W
b100 b
04
b0 A
b100 =
b100 >
b1111 #
b1111 X
b1111 k
b100 7
b100 @
b100 E
b0 ;
b100 <
b10 9
b10 ]
b10 a
b100 1
b100 F
b100 I
b100 K
b11 \
b100 &
b100 G
b100 c
b100 m
b0 '
b0 C
b0 n
1.
1,
b11 Z
b11 l
b100 j
b0 i
b11 _
b10000000011000110000011 0
b10000000011000110000011 J
b10000000011000110000011 h
b10100 *
b10100 T
b10100 U
b10100 (
b10100 O
b10100 Q
b10100 )
b10100 L
b10100 R
b10000 +
b10000 M
b10000 P
b10000 V
b10000 g
b100000 p
1!
#850
0!
#900
b1100 A
b1111 ?
b10010 5
b10010 D
b10010 W
b10010 b
b10010 >
b11 =
b11 ;
b1100 <
b10010 #
b10010 X
b10010 k
b11 9
b11 ]
b11 a
0%
b11 7
b11 @
b11 E
b1111 '
b1111 C
b1111 n
b0 2
b0 Y
b0 d
b1 /
b1 H
b1 `
b11 1
b11 F
b11 I
b11 K
b1001 &
b1001 G
b1001 c
b1001 m
0.
0,
1-
b110 j
b11 i
b100011 _
b11000011011000110100011 0
b11000011011000110100011 J
b11000011011000110100011 h
b11000 *
b11000 T
b11000 U
b11000 (
b11000 O
b11000 Q
b10111 )
b10111 L
b10111 R
b10100 +
b10100 M
b10100 P
b10100 V
b10100 g
b100000 p
1!
#950
0!
#1000
x6
xS
bx ?
bx A
x4
bx 7
bx @
bx E
b0 #
b0 X
b0 k
bx >
bx =
x%
bx 1
bx F
bx I
bx K
bx ;
bx <
b0 5
b0 D
b0 W
b0 b
b0 2
b0 Y
b0 d
x$
bx :
bx B
bx ^
bx /
bx H
bx `
x8
bx \
x[
bx &
bx G
bx c
bx m
bx '
bx C
bx n
x3
x.
x,
bx 9
bx ]
bx a
x-
bx Z
bx l
bx j
bx i
bx _
bx 0
bx J
bx h
bx *
bx T
bx U
b11100 (
b11100 O
b11100 Q
bx )
bx L
bx R
b11000 +
b11000 M
b11000 P
b11000 V
b11000 g
b10000000000 f
b10000000000000000000000000000011 e
1!
#1050
0!
#1100
bx (
bx O
bx Q
bx +
bx M
bx P
bx V
bx g
1!
#1150
0!
#1200
1!
#1250
0!
#1300
1!
#1350
0!
#1400
1!
#1450
0!
#1500
1!
